// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// hosted on neon; email outllok

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id         String      @id @default(uuid())
  name       String
  companions Companion[]
}

model Companion {
  id           String @id @default(uuid())
  userId       String
  userName     String
  src          String
  name         String @db.Text
  description  String
  instructions String @db.Text
  seed         String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  messages Message[]

  // @@fulltext([name])
  // ^^ will only work for the mysql this one is postgre, As it is hosted on supabase inside sqleditor execute "CREATE EXTENSION IF NOT EXISTS pg_trgm;""

  @@index([categoryId])
}

// Message can either be sent from the user or the system
enum Role {
  user
  system
}

model Message {
  id        String   @id @default(uuid())
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companionId String
  userId      String

  // onDelete as cascade to delete messages as well when the companion is Deleted 
  // Also you wont be able to delete as it will have relations with other
  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

model UserSubscription {
  id                     String  @id @default(uuid())
  userId                 String  @unique
  stripeCustomerId       String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String? @unique @map(name: "stripe_subscription_id")
  stripePriceId          String? @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @unique @map(name: "stripe_current_period_end")
}
